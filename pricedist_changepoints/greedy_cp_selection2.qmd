---
title: "Bayesian Changepoint Detection on Price Histograms"
author: "Pavel Logaƒçev"
date: "r Sys.Date()"
format:
  html:
    toc: true
    code-fold: true
    code-tools: true
    df-print: paged
engine: knitr
editor: visual
---

```{r message=FALSE, warning=FALSE}
library(Rcpp)
source("./source/data_generation.r")
source("./source/greedy_cp_selection.r")
Rcpp::sourceCpp("./source/greedy_cp_selection.cpp")
```

## Summary

This notebook demonstrates a Bayesian changepoint detection algorithm for histogram-valued time series. It is based on a greedy search  
tailored for transactional price data with varying pricing regimes.

-   Each day‚Äôs price distribution is modeled via discretized histograms.
-   The changepoint configuration is selected via greedy MAP estimation.
-   In the future, parameters may be obtained by means of sampling instead of greedy search. (For instance, using RcppSMC or a custom sampler, e.g., MH).

## Modeling Approach

Each day is represented by a histogram over discrete price points. To this end, the time series is transformed into a histogram-valued sequence, 
represented as a matrix of counts.
We assume that pricing follows certain *pricing regimes*, each associated with a different price distribution. Changes in pricing regime occur when 
the pricing of a product undergoes a meaningful change ‚Äî such as list price changes, promotions, or changes in the availability of discounts.
Changepoints are defined as time indices where the underlying price distribution regime changes, leading to a change in relative frequency of price points.


### Data Format

In the synthetic data set used here, we assume multiple pricing regimes, each characterized by a different list price, a different discount price, or 
a different discount probability. We generate a synthetic data set with 800 days, with 9 changepoints, with the following properties:

```{r}
set.seed(123)

segments <- data.frame(
             start_day = c(1,  90, 250, 300, 400, 500, 550, 600, 700, 750),
            list_price = c(5,    6,   6,   6,   6, 5.5, 5.5, 5.5, 7, 7),
        discount_price = c(4,    4,   5,   5,   5, 4.5, 4.5, 4.5, 2, 2),
  discount_probability = c(.25, .1,  .1, .25,  .5, .01, .03, .15,.3, .25)
)

n_days <- 800
lambda_qty <- 20
df <- generate_transaction_prices(segments, n_days, lambda_qty, seed = 123)
hist <- compute_price_histogram(df)
actual_changepoints <- segments$start_day[-1]-0.5

knitr::kable(segments, caption = "Price Regimes Overview")
```

The plot below shows the synthetic data set, with the actual changepoints marked with dashed vertical lines.

```{r fig.height=3, fig.width=10}
p_price <- hist$df %>% rename(quantity = qty) %>%  filter(quantity > 0) %>%
    ggplot(aes(day, price)) + geom_point(aes(size=quantity, alpha = quantity)) + 
    geom_vline( data = data.frame(x = actual_changepoints, changepoint = "actual"),
                aes(xintercept = x, color = changepoint), linetype = "dashed") + theme_bw() +
    theme(legend.position = "top") 

print(p_price)
```

### Likelihood and Posterior

We define the likelihood of a segmentation as the sum of within-segment log-likelihoods, each modeled as a multinomial distribution over price bins.
To regularize the solution and avoid overfitting, we place a Bernoulli prior on each possible changepoint with success probability Œª.
The log-posterior of a changepoint configuration is:

$$
 \text{log}~p(z‚à£data) \propto \text{log}~p(data‚à£z) + \text{log}~p(z)
$$


The core of the model is the log-likelihood of a price histogram segment. 
For a time window $[t_1, t_2]$, we compute the (regularized) empirical histogram:

```{=html}
<pre><code class="language-cpp">
double log1m_exp(double x)
{
if (x >= 0.0) stop("log1m_exp is undefined for x >= 0");
...
}
</code></pre>
```

Each histogram is treated as a multinomial count vector. We compute the segment's likelihood using the empirical distribution‚Äôs entropy:

$$
\log p(\mathbf{n}) = \sum_{i=1}^{K} n_i \log\left( \frac{n_i + \epsilon}{\sum_j (n_j + \epsilon)} \right)
$$

This avoids instability from zero counts via additive smoothing (`epsilon`).



## Estimation

To estimate the changepoint configuration c, we use a greedy forward search:

1.  Start with no changepoints.
2.  Iteratively add the changepoint that most increases the penalized log-likelihood.
3.  Stop when no further improvement is possible.

This process is repeated for various values of $\lambda$ (transformed from a logit_lambda scale), and the $\lambda$ value that maximizes the resulting log-posterior is selected using one-dimensional optimization (`optimize()` in R).

## Algorithm and Implementation

This project implements a greedy changepoint detection algorithm for time series of price histograms. The codebase consists of three components:

-   A data generator that simulates daily transaction-level price data under piecewise constant pricing regimes (`generate_transaction_prices()`).
-   A transformation step that maps transactional data into a histogram matrix (`compute_price_histogram()`).
-   A C++ backend that performs fast log-likelihood evaluation and greedy changepoint selection via Rcpp.

## Segment Likelihood: Histogram Log-Likelihood

## Data Generation


## Changepoint Detection

```{r }
opt_res <- locate_optimal_changepoints( hist$histogram, max_lambda = 0.3 )
detected_changepoints <- which(opt_res$changepoints) - 0.5
detected_changepoints
```

```{r fig.height=3, fig.width=10}
p_price +
      geom_vline( data = data.frame(x = detected_changepoints, changepoint = "detected"),
                  aes(xintercept = x, color = changepoint), linetype = "dashed") +
      scale_color_manual(name = "changepoint", values = c("detected" = "blue", "actual" = "red"),
                        guide = guide_legend(override.aes = list( linetype = "solid", size = 1))
                        )
```

## Repository

All source code is available here:\
üëâ <https://github.com/plogacev/case_studies/tree/main/pricedist_changepoints>